/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.alexey.event.threads

import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runTest
import ru.alexey.event.threads.emitter.Emitter
import ru.alexey.event.threads.resources.Resource
import ru.alexey.event.threads.resources.flowResource
import ru.alexey.event.threads.resources.invoke
import ru.alexey.event.threads.resources.param
import ru.alexey.event.threads.resources.resolve
import ru.alexey.event.threads.resources.resource
import ru.alexey.event.threads.resources.valueResource
import kotlin.jvm.JvmInline
import kotlin.test.Test
import kotlin.test.assertIs
import kotlin.test.assertNotNull
import kotlin.time.Duration.Companion.minutes
import kotlin.time.Duration.Companion.seconds

data object TestEvent : Event

data object WrongEvent : Event

interface Error : Event

@JvmInline
value class IntEvent(val number: Int) : Event


data class Redirect(
    val name: String
) : Event


data class Returned(val s: String, val m: Int)

class TestResource(val i: Returned) : Resource<Returned> {
    override fun invoke(): Returned {
        return i
    }
}


data class Test1(val str: String) : Resource<String> {
    override fun invoke(): String {
        return str
    }
}


data object OnButtonClick: Event
data class Kirill(
    val name: String
)

class LibraryTest {
    @Test
    fun test() = runTest(timeout = 10.seconds) {

        val config = scopeBuilder("Test") {

            config {
                createEventBus {
                    watcher {
                        println(it)
                    }
                }
            }
            val testString by resource {
                flowResource("Hello World!")
            }
            val anotherString by ru.alexey.event.threads.resources.observable {
                val testValue by testString()
                flowResource("I said $testValue")
            }

            /*resources {
                val testString by registerDelegate {
                    valueResource("Hello World!")
                }

                val anotherString by registerDelegate {
                    valueResource("I said ${testString()}")
                }
            }*/
            containers {
                container(source = anotherString()) {

                }
            }

            threads {
                eventThread<TestEvent> {
                    //val res = anotherString()
                    //println(res)
                    val res1 = anotherString {
                        param { 125 }
                    }
                    println(res1())
                }
            }
        }

        config.eventBus + TestEvent

        config.resolveOrThrow<String>().collect {
            println("TEST: $it")
        }

    }

    @Test
    fun test1() = runTest {
        val config = scopeBuilder("") {

            threads {
                eventThread<TestEvent> {
                    println("!")
                }
                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                    this + TestEvent
                }
            }
        }

        config.eventBus + WrongEvent
        delay(1000)
    }

    @Test
    fun test2() = runTest(
        timeout = 1.minutes
    ) {

        val config = scopeBuilder("") {

            config {
                createEventBus {
                    watcher {
                        println("Hello World!")
                    }
                    watcher {
                        println(it)
                    }
                    errorWatcher<Error> {

                    }
                    coroutineScope {
                        this@runTest
                    }
                }
            }
            resources {
                register {
                    flowResource<Long>(
                        get<Double>().toLong()
                    )
                }
                register {
                    flowResource<Double>(51.9)
                }
                register {
                    flowResource(-15)
                }
                register<String> {
                    flowResource("Str")
                }
                register { params ->
                    TestResource(
                        Returned(
                            s = get(),
                            m = params.resolve()
                        )
                    )
                }
            }

            containers {
                container(8) {
                    transform<String> { o: String, i ->
                        o.toInt() + i
                    }
                    transform<Long> { other, i ->
                        i * other.toInt()
                    }
                }
                container("3")

                container {
                    resource<Long>()
                    transform<String> { s: String, l: Long ->
                        s.toLong() * l
                    }
                }
            }

            emitters {
                emitter {
                    object : Emitter<TestEvent> {
                        override val flow: Flow<TestEvent> = flowOf(TestEvent, TestEvent, TestEvent, TestEvent)
                    }
                }
            }

            threads {
                eventThread<TestEvent> {
                    println("!")
                    val resource = resource<Returned> {
                        param { 12 }
                    }
                    println(resource())
                } trigger {
                    Redirect(it.toString())
                }

                eventThread<Redirect> {
                    println("$it was triggered by Redirect")
                }

                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                    this + TestEvent
                } bind { value: Long, _ ->
                    value + 1
                }
                eventThread<IntEvent> {

                } bind { value: String, i ->
                    (value.toInt() + i.number).toString()
                } bind { value: Int, i ->
                    value + i.number
                }
            }
        }
        config.eventBus + WrongEvent

        config.eventBus + IntEvent(4)
        launch {
            val dc = config.resolveOrThrow<Long>()
            assertNotNull(dc)
            dc.collect {
                println(it)
            }
        }
    }

    @Test
    fun check() = runTest {
        val config = scopeBuilder("") {

            config {
                createEventBus {

                }
            }

            resources {

            }

            containers {
                container(Kirill("Kirill"))
            }

            threads {
                eventThread<OnButtonClick> {
                    println("-----------")
                    println(it)
                    println("-----------")
                }
            }
        }

        config.eventBus + OnButtonClick
    }
}

