/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.alexey.event.threads

import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.take
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runTest
import kotlin.test.*
import kotlin.time.Duration.Companion.minutes

data object TestEvent : Event

data object WrongEvent : Event

class LibraryTest {
    
    
    @Test
    fun test() = runTest {
        
        val config = eventsBuilder {

            config {
                createEventBus {
                    watcher {
                        println(it)
                    }
                }
            }
            /*threads {
                eventThread<TestEvent> {
                    assertSame(TestEvent, it)
                }
            }*/
        }
        
        config.eventBus + TestEvent
        
        delay(1000)

    }
    
    @Test
    fun test1() = runTest {
        val config = eventsBuilder {

            /*threads {
                eventThread<TestEvent> {
                    println("!")
                }
                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                    this + TestEvent
                }
            }*/
        }

        config.eventBus + WrongEvent
        delay(1000)
    }

    @Test
    fun test2() = runTest(
        timeout = 1.minutes
    ) {

        val config = eventsBuilder {

            config {

                createEventBus {
                    watcher {
                        println("Hello World!")
                    }
                }
            }

            containers {
                container(8) {
                    transform<String> { o: String, i ->
                        o.toInt() + i
                    }
                }

                container("3")
            }

            /*threads {
                eventThread<TestEvent> {
                    println("!")
                }
                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                } bind { value: Int, _ ->
                    value + 1
                }
            }*/
        }

        config.eventBus + WrongEvent

        launch {
            val dc = config.resolveOrThrow<Int>()
            assertNotNull(dc)
            dc.take(2).collect {
                println(it)
            }
        }
    }
}
