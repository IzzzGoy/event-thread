/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.alexey.event.threads

import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.runTest
import ru.alexey.event.threads.datacontainer.container
import ru.alexey.event.threads.resources.recourses
import kotlin.jvm.JvmInline
import kotlin.test.*
import kotlin.time.Duration.Companion.minutes

data object TestEvent : Event

data object WrongEvent : Event

@JvmInline
value class IntEvent(val number: Int) : Event

class LibraryTest {
    @Test
    fun test() = runTest {
        
        val config = eventsBuilder {

            config {
                createEventBus {
                    watcher {
                        println(it)
                    }
                }
            }
            threads {
                eventThread<TestEvent> {
                    assertSame(TestEvent, it)
                }
            }
        }
        
        config.eventBus + TestEvent
        
        delay(1000)

    }
    
    @Test
    fun test1() = runTest {
        val config = eventsBuilder {

            threads {
                eventThread<TestEvent> {
                    println("!")
                }
                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                    this + TestEvent
                }
            }
        }

        config.eventBus + WrongEvent
        delay(1000)
    }

    @Test
    fun test2() = runTest(
        timeout = 1.minutes
    ) {

        val config = eventsBuilder {

            config {
                createEventBus {
                    watcher {
                        println("Hello World!")
                    }
                    watcher {
                        println(it)
                    }
                }
            }

            recourses {

            }

            containers {
                container(8) {
                    transform<String> { o: String, i ->
                        o.toInt() + i
                    }
                    transform<Long> { other, i ->
                        i * other.toInt()
                    }
                }
                container("3")
                container(16L) {
                    transform<String> { s: String, l: Long ->
                        s.toLong() * l
                    }
                }
            }

            threads {
                eventThread<TestEvent> {
                    println("!")
                }
                eventThread<WrongEvent> {
                    assertIs<WrongEvent>(it)
                    this + TestEvent
                } bind { value: Long, _ ->
                    value + 1
                }
                eventThread<IntEvent> {

                } bind { value: String, i ->
                    (value.toInt() + i.number).toString()
                } bind { value: Int , i ->
                    value + i.number
                }
            }
        }
        config.eventBus + WrongEvent

        config.eventBus + IntEvent(4)
        launch {
            val dc = config.resolveOrThrow<String>()
            assertNotNull(dc)
            dc.collect {
                println(it)
            }
        }


    }
}
